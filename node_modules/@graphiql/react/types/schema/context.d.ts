import { Fetcher } from '@graphiql/toolkit';
import { GraphQLError, GraphQLSchema } from 'graphql';
import { Dispatch, ReactNode, SetStateAction } from 'react';
/**
 * There's a semantic difference between `null` and `undefined`:
 * - When `null` is passed explicitly as prop, GraphiQL will run schemaless
 *   (i.e. it will never attempt to fetch the schema, even when calling the
 *   `useFetchSchema` hook).
 * - When `schema` is `undefined` GraphiQL will attempt to fetch the schema
 *   when calling `useFetchSchema`.
 */
declare type MaybeGraphQLSchema = GraphQLSchema | null | undefined;
export declare type SchemaContextType = {
  fetchError: string | null;
  isFetching: boolean;
  schema: MaybeGraphQLSchema;
  setFetchError: Dispatch<SetStateAction<string | null>>;
  setSchema: Dispatch<SetStateAction<MaybeGraphQLSchema>>;
  validationErrors: readonly GraphQLError[] | null;
};
export declare const SchemaContext: import('react').Context<SchemaContextType>;
declare type SchemaContextProviderProps = {
  children: ReactNode;
  dangerouslyAssumeSchemaIsValid?: boolean;
  fetcher: Fetcher;
  initialHeaders?: string;
  schema?: GraphQLSchema | null;
} & IntrospectionArgs;
export declare function SchemaContextProvider(
  props: SchemaContextProviderProps,
): JSX.Element;
declare type IntrospectionArgs = {
  inputValueDeprecation?: boolean;
  introspectionQueryName?: string;
  schemaDescription?: boolean;
};
export {};
