{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar feedback, scoring;\nscoring = require('./scoring');\nfeedback = {\n  default_feedback: {\n    warning: '',\n    suggestions: [\"Use a few words, avoid common phrases\", \"No need for symbols, digits, or uppercase letters\"]\n  },\n  get_feedback: function (score, sequence) {\n    var extra_feedback, i, len, longest_match, match, ref;\n\n    if (sequence.length === 0) {\n      return this.default_feedback;\n    }\n\n    if (score > 2) {\n      return {\n        warning: '',\n        suggestions: []\n      };\n    }\n\n    longest_match = sequence[0];\n    ref = sequence.slice(1);\n\n    for (i = 0, len = ref.length; i < len; i++) {\n      match = ref[i];\n\n      if (match.token.length > longest_match.token.length) {\n        longest_match = match;\n      }\n    }\n\n    feedback = this.get_match_feedback(longest_match, sequence.length === 1);\n    extra_feedback = 'Add another word or two. Uncommon words are better.';\n\n    if (feedback != null) {\n      feedback.suggestions.unshift(extra_feedback);\n\n      if (feedback.warning == null) {\n        feedback.warning = '';\n      }\n    } else {\n      feedback = {\n        warning: '',\n        suggestions: [extra_feedback]\n      };\n    }\n\n    return feedback;\n  },\n  get_match_feedback: function (match, is_sole_match) {\n    var layout, warning;\n\n    switch (match.pattern) {\n      case 'dictionary':\n        return this.get_dictionary_match_feedback(match, is_sole_match);\n\n      case 'spatial':\n        layout = match.graph.toUpperCase();\n        warning = match.turns === 1 ? 'Straight rows of keys are easy to guess' : 'Short keyboard patterns are easy to guess';\n        return {\n          warning: warning,\n          suggestions: ['Use a longer keyboard pattern with more turns']\n        };\n\n      case 'repeat':\n        warning = match.base_token.length === 1 ? 'Repeats like \"aaa\" are easy to guess' : 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"';\n        return {\n          warning: warning,\n          suggestions: ['Avoid repeated words and characters']\n        };\n\n      case 'sequence':\n        return {\n          warning: \"Sequences like abc or 6543 are easy to guess\",\n          suggestions: ['Avoid sequences']\n        };\n\n      case 'regex':\n        if (match.regex_name === 'recent_year') {\n          return {\n            warning: \"Recent years are easy to guess\",\n            suggestions: ['Avoid recent years', 'Avoid years that are associated with you']\n          };\n        }\n\n        break;\n\n      case 'date':\n        return {\n          warning: \"Dates are often easy to guess\",\n          suggestions: ['Avoid dates and years that are associated with you']\n        };\n    }\n  },\n  get_dictionary_match_feedback: function (match, is_sole_match) {\n    var ref, result, suggestions, warning, word;\n    warning = match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'This is a top-10 common password' : match.rank <= 100 ? 'This is a top-100 common password' : 'This is a very common password' : match.guesses_log10 <= 4 ? 'This is similar to a commonly used password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'A word by itself is easy to guess' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'Names and surnames by themselves are easy to guess' : 'Common names and surnames are easy to guess' : '';\n    suggestions = [];\n    word = match.token;\n\n    if (word.match(scoring.START_UPPER)) {\n      suggestions.push(\"Capitalization doesn't help very much\");\n    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {\n      suggestions.push(\"All-uppercase is almost as easy to guess as all-lowercase\");\n    }\n\n    if (match.reversed && match.token.length >= 4) {\n      suggestions.push(\"Reversed words aren't much harder to guess\");\n    }\n\n    if (match.l33t) {\n      suggestions.push(\"Predictable substitutions like '@' instead of 'a' don't help very much\");\n    }\n\n    result = {\n      warning: warning,\n      suggestions: suggestions\n    };\n    return result;\n  }\n};\nmodule.exports = feedback;","map":{"version":3,"mappings":"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","names":["scoring","require","feedback","default_feedback","warning","suggestions","get_feedback","score","sequence","length","longest_match","ref","match","token","get_match_feedback","extra_feedback","unshift","is_sole_match","pattern","get_dictionary_match_feedback","layout","graph","toUpperCase","turns","base_token","regex_name","dictionary_name","l33t","reversed","rank","guesses_log10","word","START_UPPER","push","ALL_UPPER","toLowerCase","result","module","exports"],"sources":["C:\\Users\\Shrishti.s\\Desktop\\final_ecommerce_rtdb\\node_modules\\zxcvbn\\src\\feedback.coffee"],"sourcesContent":["scoring = require('./scoring')\n\nfeedback =\n  default_feedback:\n    warning: ''\n    suggestions: [\n      \"Use a few words, avoid common phrases\"\n      \"No need for symbols, digits, or uppercase letters\"\n    ]\n\n  get_feedback: (score, sequence) ->\n    # starting feedback\n    return @default_feedback if sequence.length == 0\n\n    # no feedback if score is good or great.\n    return if score > 2\n      warning: ''\n      suggestions: []\n\n    # tie feedback to the longest match for longer sequences\n    longest_match = sequence[0]\n    for match in sequence[1..]\n      longest_match = match if match.token.length > longest_match.token.length\n    feedback = @get_match_feedback(longest_match, sequence.length == 1)\n    extra_feedback = 'Add another word or two. Uncommon words are better.'\n    if feedback?\n      feedback.suggestions.unshift extra_feedback\n      feedback.warning = '' unless feedback.warning?\n    else\n      feedback =\n        warning: ''\n        suggestions: [extra_feedback]\n    feedback\n\n  get_match_feedback: (match, is_sole_match) ->\n    switch match.pattern\n      when 'dictionary'\n        @get_dictionary_match_feedback match, is_sole_match\n\n      when 'spatial'\n        layout = match.graph.toUpperCase()\n        warning = if match.turns == 1\n          'Straight rows of keys are easy to guess'\n        else\n          'Short keyboard patterns are easy to guess'\n        warning: warning\n        suggestions: [\n          'Use a longer keyboard pattern with more turns'\n        ]\n\n      when 'repeat'\n        warning = if match.base_token.length == 1\n          'Repeats like \"aaa\" are easy to guess'\n        else\n          'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"'\n        warning: warning\n        suggestions: [\n          'Avoid repeated words and characters'\n        ]\n\n      when 'sequence'\n        warning: \"Sequences like abc or 6543 are easy to guess\"\n        suggestions: [\n          'Avoid sequences'\n        ]\n\n      when 'regex'\n        if match.regex_name == 'recent_year'\n          warning: \"Recent years are easy to guess\"\n          suggestions: [\n            'Avoid recent years'\n            'Avoid years that are associated with you'\n          ]\n\n      when 'date'\n        warning: \"Dates are often easy to guess\"\n        suggestions: [\n          'Avoid dates and years that are associated with you'\n        ]\n\n  get_dictionary_match_feedback: (match, is_sole_match) ->\n    warning = if match.dictionary_name == 'passwords'\n      if is_sole_match and not match.l33t and not match.reversed\n        if match.rank <= 10\n          'This is a top-10 common password'\n        else if match.rank <= 100\n          'This is a top-100 common password'\n        else\n          'This is a very common password'\n      else if match.guesses_log10 <= 4\n        'This is similar to a commonly used password'\n    else if match.dictionary_name == 'english_wikipedia'\n      if is_sole_match\n        'A word by itself is easy to guess'\n    else if match.dictionary_name in ['surnames', 'male_names', 'female_names']\n      if is_sole_match\n        'Names and surnames by themselves are easy to guess'\n      else\n        'Common names and surnames are easy to guess'\n    else\n      ''\n\n    suggestions = []\n    word = match.token\n    if word.match(scoring.START_UPPER)\n      suggestions.push \"Capitalization doesn't help very much\"\n    else if word.match(scoring.ALL_UPPER) and word.toLowerCase() != word\n      suggestions.push \"All-uppercase is almost as easy to guess as all-lowercase\"\n\n    if match.reversed and match.token.length >= 4\n      suggestions.push \"Reversed words aren't much harder to guess\"\n    if match.l33t\n      suggestions.push \"Predictable substitutions like '@' instead of 'a' don't help very much\"\n\n    result =\n      warning: warning\n      suggestions: suggestions\n    result\n\nmodule.exports = feedback\n"]},"metadata":{},"sourceType":"script"}