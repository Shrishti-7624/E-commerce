{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { emailValidator, passwordValidator, confirmPasswordValidator } from \"./Validator\";\n\nconst touchErrors = errors => {\n  return Object.entries(errors).reduce((acc, _ref) => {\n    let [field, fieldError] = _ref;\n    acc[field] = { ...fieldError,\n      dirty: true\n    };\n    return acc;\n  }, {});\n};\n\nexport const useLoginFormValidator = form => {\n  _s();\n\n  const [errors, setErrors] = useState({\n    email: {\n      dirty: false,\n      error: false,\n      message: \"\"\n    },\n    password: {\n      dirty: false,\n      error: false,\n      message: \"\"\n    },\n    confirmPassword: {\n      dirty: false,\n      error: false,\n      message: \"\"\n    }\n  });\n\n  const validateForm = _ref2 => {\n    let {\n      form,\n      field,\n      errors,\n      forceTouchErrors = false\n    } = _ref2;\n    let isValid = true; // Create a deep copy of the errors\n\n    const nextErrors = JSON.parse(JSON.stringify(errors)); // Force validate all the fields\n\n    if (forceTouchErrors) {\n      nextErrors = touchErrors(errors);\n    }\n\n    const {\n      email,\n      password,\n      confirmPassword\n    } = form;\n\n    if (nextErrors.email.dirty && (field ? field === \"email\" : true)) {\n      const emailMessage = emailValidator(email, form);\n      nextErrors.email.error = !!emailMessage;\n      nextErrors.email.message = emailMessage;\n      if (!!emailMessage) isValid = false;\n    }\n\n    if (nextErrors.password.dirty && (field ? field === \"password\" : true)) {\n      const passwordMessage = passwordValidator(password, form);\n      nextErrors.password.error = !!passwordMessage;\n      nextErrors.password.message = passwordMessage;\n      if (!!passwordMessage) isValid = false;\n    }\n\n    if (nextErrors.confirmPassword.dirty && (field ? field === \"confirmPassword\" : true)) {\n      const confirmPasswordMessage = confirmPasswordValidator(confirmPassword, form);\n      nextErrors.confirmPassword.error = !!confirmPasswordMessage;\n      nextErrors.confirmPassword.message = confirmPasswordMessage;\n      if (!!confirmPasswordMessage) isValid = false;\n    }\n\n    setErrors(nextErrors);\n    return {\n      isValid,\n      errors: nextErrors\n    };\n  };\n\n  const onBlurField = e => {\n    const field = e.target.name;\n    const fieldError = errors[field];\n    if (fieldError.dirty) return;\n    const updatedErrors = { ...errors,\n      [field]: { ...errors[field],\n        dirty: true\n      }\n    };\n    validateForm({\n      form,\n      field,\n      errors: updatedErrors\n    });\n  };\n\n  return {\n    validateForm,\n    onBlurField,\n    errors\n  };\n};\n\n_s(useLoginFormValidator, \"4vktZeBx2FW8tqN1yyQSreJVJNU=\");","map":{"version":3,"names":["useState","emailValidator","passwordValidator","confirmPasswordValidator","touchErrors","errors","Object","entries","reduce","acc","field","fieldError","dirty","useLoginFormValidator","form","setErrors","email","error","message","password","confirmPassword","validateForm","forceTouchErrors","isValid","nextErrors","JSON","parse","stringify","emailMessage","passwordMessage","confirmPasswordMessage","onBlurField","e","target","name","updatedErrors"],"sources":["C:/Users/Shrishti.s/Desktop/final_ecommerce_rtdb/src/Component/SignUp/UseLoginFormValidator.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nimport {\r\n  emailValidator,\r\n  passwordValidator,\r\n  confirmPasswordValidator,\r\n} from \"./Validator\";\r\n\r\nconst touchErrors = (errors) => {\r\n  return Object.entries(errors).reduce((acc, [field, fieldError]) => {\r\n    acc[field] = {\r\n      ...fieldError,\r\n      dirty: true,\r\n    };\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nexport const useLoginFormValidator = (form) => {\r\n  const [errors, setErrors] = useState({\r\n    email: {\r\n      dirty: false,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      dirty: false,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    confirmPassword: {\r\n      dirty: false,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const validateForm = ({ form, field, errors, forceTouchErrors = false }) => {\r\n    let isValid = true;\r\n\r\n    // Create a deep copy of the errors\r\n    const nextErrors = JSON.parse(JSON.stringify(errors));\r\n\r\n    // Force validate all the fields\r\n    if (forceTouchErrors) {\r\n      nextErrors = touchErrors(errors);\r\n    }\r\n\r\n    const { email, password, confirmPassword } = form;\r\n\r\n    if (nextErrors.email.dirty && (field ? field === \"email\" : true)) {\r\n      const emailMessage = emailValidator(email, form);\r\n      nextErrors.email.error = !!emailMessage;\r\n      nextErrors.email.message = emailMessage;\r\n      if (!!emailMessage) isValid = false;\r\n    }\r\n\r\n    if (nextErrors.password.dirty && (field ? field === \"password\" : true)) {\r\n      const passwordMessage = passwordValidator(password, form);\r\n      nextErrors.password.error = !!passwordMessage;\r\n      nextErrors.password.message = passwordMessage;\r\n      if (!!passwordMessage) isValid = false;\r\n    }\r\n\r\n    if (\r\n      nextErrors.confirmPassword.dirty &&\r\n      (field ? field === \"confirmPassword\" : true)\r\n    ) {\r\n      const confirmPasswordMessage = confirmPasswordValidator(\r\n        confirmPassword,\r\n        form\r\n      );\r\n      nextErrors.confirmPassword.error = !!confirmPasswordMessage;\r\n      nextErrors.confirmPassword.message = confirmPasswordMessage;\r\n      if (!!confirmPasswordMessage) isValid = false;\r\n    }\r\n\r\n    setErrors(nextErrors);\r\n\r\n    return {\r\n      isValid,\r\n      errors: nextErrors,\r\n    };\r\n  };\r\n\r\n  const onBlurField = (e) => {\r\n    const field = e.target.name;\r\n    const fieldError = errors[field];\r\n    if (fieldError.dirty) return;\r\n\r\n    const updatedErrors = {\r\n      ...errors,\r\n      [field]: {\r\n        ...errors[field],\r\n        dirty: true,\r\n      },\r\n    };\r\n\r\n    validateForm({ form, field, errors: updatedErrors });\r\n  };\r\n\r\n  return {\r\n    validateForm,\r\n    onBlurField,\r\n    errors,\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}