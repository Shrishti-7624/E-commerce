{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, GRAPHS, L33T_TABLE, RANKED_DICTIONARIES, REGEXEN, adjacency_graphs, build_ranked_dict, frequency_lists, lst, matching, name, scoring;\nfrequency_lists = require('./frequency_lists');\nadjacency_graphs = require('./adjacency_graphs');\nscoring = require('./scoring');\n\nbuild_ranked_dict = function (ordered_list) {\n  var i, len1, o, result, word;\n  result = {};\n  i = 1;\n\n  for (o = 0, len1 = ordered_list.length; o < len1; o++) {\n    word = ordered_list[o];\n    result[word] = i;\n    i += 1;\n  }\n\n  return result;\n};\n\nRANKED_DICTIONARIES = {};\n\nfor (name in frequency_lists) {\n  lst = frequency_lists[name];\n  RANKED_DICTIONARIES[name] = build_ranked_dict(lst);\n}\n\nGRAPHS = {\n  qwerty: adjacency_graphs.qwerty,\n  dvorak: adjacency_graphs.dvorak,\n  keypad: adjacency_graphs.keypad,\n  mac_keypad: adjacency_graphs.mac_keypad\n};\nL33T_TABLE = {\n  a: ['4', '@'],\n  b: ['8'],\n  c: ['(', '{', '[', '<'],\n  e: ['3'],\n  g: ['6', '9'],\n  i: ['1', '!', '|'],\n  l: ['1', '|', '7'],\n  o: ['0'],\n  s: ['$', '5'],\n  t: ['+', '7'],\n  x: ['%'],\n  z: ['2']\n};\nREGEXEN = {\n  recent_year: /19\\d\\d|200\\d|201\\d/g\n};\nDATE_MAX_YEAR = 2050;\nDATE_MIN_YEAR = 1000;\nDATE_SPLITS = {\n  4: [[1, 2], [2, 3]],\n  5: [[1, 3], [2, 3]],\n  6: [[1, 2], [2, 4], [4, 5]],\n  7: [[1, 3], [2, 3], [4, 5], [4, 6]],\n  8: [[2, 4], [4, 6]]\n};\nmatching = {\n  empty: function (obj) {\n    var k;\n    return function () {\n      var results;\n      results = [];\n\n      for (k in obj) {\n        results.push(k);\n      }\n\n      return results;\n    }().length === 0;\n  },\n  extend: function (lst, lst2) {\n    return lst.push.apply(lst, lst2);\n  },\n  translate: function (string, chr_map) {\n    var chr;\n    return function () {\n      var len1, o, ref, results;\n      ref = string.split('');\n      results = [];\n\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        chr = ref[o];\n        results.push(chr_map[chr] || chr);\n      }\n\n      return results;\n    }().join('');\n  },\n  mod: function (n, m) {\n    return (n % m + m) % m;\n  },\n  sorted: function (matches) {\n    return matches.sort(function (m1, m2) {\n      return m1.i - m2.i || m1.j - m2.j;\n    });\n  },\n  omnimatch: function (password) {\n    var len1, matcher, matchers, matches, o;\n    matches = [];\n    matchers = [this.dictionary_match, this.reverse_dictionary_match, this.l33t_match, this.spatial_match, this.repeat_match, this.sequence_match, this.regex_match, this.date_match];\n\n    for (o = 0, len1 = matchers.length; o < len1; o++) {\n      matcher = matchers[o];\n      this.extend(matches, matcher.call(this, password));\n    }\n\n    return this.sorted(matches);\n  },\n  dictionary_match: function (password, _ranked_dictionaries) {\n    var dictionary_name, i, j, len, matches, o, p, password_lower, rank, ranked_dict, ref, ref1, ref2, word;\n\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n\n    matches = [];\n    len = password.length;\n    password_lower = password.toLowerCase();\n\n    for (dictionary_name in _ranked_dictionaries) {\n      ranked_dict = _ranked_dictionaries[dictionary_name];\n\n      for (i = o = 0, ref = len; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        for (j = p = ref1 = i, ref2 = len; ref1 <= ref2 ? p < ref2 : p > ref2; j = ref1 <= ref2 ? ++p : --p) {\n          if (password_lower.slice(i, +j + 1 || 9e9) in ranked_dict) {\n            word = password_lower.slice(i, +j + 1 || 9e9);\n            rank = ranked_dict[word];\n            matches.push({\n              pattern: 'dictionary',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              matched_word: word,\n              rank: rank,\n              dictionary_name: dictionary_name,\n              reversed: false,\n              l33t: false\n            });\n          }\n        }\n      }\n    }\n\n    return this.sorted(matches);\n  },\n  reverse_dictionary_match: function (password, _ranked_dictionaries) {\n    var len1, match, matches, o, ref, reversed_password;\n\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n\n    reversed_password = password.split('').reverse().join('');\n    matches = this.dictionary_match(reversed_password, _ranked_dictionaries);\n\n    for (o = 0, len1 = matches.length; o < len1; o++) {\n      match = matches[o];\n      match.token = match.token.split('').reverse().join('');\n      match.reversed = true;\n      ref = [password.length - 1 - match.j, password.length - 1 - match.i], match.i = ref[0], match.j = ref[1];\n    }\n\n    return this.sorted(matches);\n  },\n  set_user_input_dictionary: function (ordered_list) {\n    return RANKED_DICTIONARIES['user_inputs'] = build_ranked_dict(ordered_list.slice());\n  },\n  relevant_l33t_subtable: function (password, table) {\n    var chr, len1, letter, o, password_chars, ref, relevant_subs, sub, subs, subtable;\n    password_chars = {};\n    ref = password.split('');\n\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      chr = ref[o];\n      password_chars[chr] = true;\n    }\n\n    subtable = {};\n\n    for (letter in table) {\n      subs = table[letter];\n\n      relevant_subs = function () {\n        var len2, p, results;\n        results = [];\n\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n\n          if (sub in password_chars) {\n            results.push(sub);\n          }\n        }\n\n        return results;\n      }();\n\n      if (relevant_subs.length > 0) {\n        subtable[letter] = relevant_subs;\n      }\n    }\n\n    return subtable;\n  },\n  enumerate_l33t_subs: function (table) {\n    var chr, dedup, helper, k, keys, l33t_chr, len1, len2, o, p, ref, sub, sub_dict, sub_dicts, subs;\n\n    keys = function () {\n      var results;\n      results = [];\n\n      for (k in table) {\n        results.push(k);\n      }\n\n      return results;\n    }();\n\n    subs = [[]];\n\n    dedup = function (subs) {\n      var assoc, deduped, label, len1, members, o, sub, v;\n      deduped = [];\n      members = {};\n\n      for (o = 0, len1 = subs.length; o < len1; o++) {\n        sub = subs[o];\n\n        assoc = function () {\n          var len2, p, results;\n          results = [];\n\n          for (v = p = 0, len2 = sub.length; p < len2; v = ++p) {\n            k = sub[v];\n            results.push([k, v]);\n          }\n\n          return results;\n        }();\n\n        assoc.sort();\n\n        label = function () {\n          var len2, p, results;\n          results = [];\n\n          for (v = p = 0, len2 = assoc.length; p < len2; v = ++p) {\n            k = assoc[v];\n            results.push(k + ',' + v);\n          }\n\n          return results;\n        }().join('-');\n\n        if (!(label in members)) {\n          members[label] = true;\n          deduped.push(sub);\n        }\n      }\n\n      return deduped;\n    };\n\n    helper = function (keys) {\n      var dup_l33t_index, first_key, i, l33t_chr, len1, len2, next_subs, o, p, q, ref, ref1, rest_keys, sub, sub_alternative, sub_extension;\n\n      if (!keys.length) {\n        return;\n      }\n\n      first_key = keys[0];\n      rest_keys = keys.slice(1);\n      next_subs = [];\n      ref = table[first_key];\n\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        l33t_chr = ref[o];\n\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n          dup_l33t_index = -1;\n\n          for (i = q = 0, ref1 = sub.length; 0 <= ref1 ? q < ref1 : q > ref1; i = 0 <= ref1 ? ++q : --q) {\n            if (sub[i][0] === l33t_chr) {\n              dup_l33t_index = i;\n              break;\n            }\n          }\n\n          if (dup_l33t_index === -1) {\n            sub_extension = sub.concat([[l33t_chr, first_key]]);\n            next_subs.push(sub_extension);\n          } else {\n            sub_alternative = sub.slice(0);\n            sub_alternative.splice(dup_l33t_index, 1);\n            sub_alternative.push([l33t_chr, first_key]);\n            next_subs.push(sub);\n            next_subs.push(sub_alternative);\n          }\n        }\n      }\n\n      subs = dedup(next_subs);\n      return helper(rest_keys);\n    };\n\n    helper(keys);\n    sub_dicts = [];\n\n    for (o = 0, len1 = subs.length; o < len1; o++) {\n      sub = subs[o];\n      sub_dict = {};\n\n      for (p = 0, len2 = sub.length; p < len2; p++) {\n        ref = sub[p], l33t_chr = ref[0], chr = ref[1];\n        sub_dict[l33t_chr] = chr;\n      }\n\n      sub_dicts.push(sub_dict);\n    }\n\n    return sub_dicts;\n  },\n  l33t_match: function (password, _ranked_dictionaries, _l33t_table) {\n    var chr, k, len1, len2, match, match_sub, matches, o, p, ref, ref1, sub, subbed_chr, subbed_password, token, v;\n\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n\n    if (_l33t_table == null) {\n      _l33t_table = L33T_TABLE;\n    }\n\n    matches = [];\n    ref = this.enumerate_l33t_subs(this.relevant_l33t_subtable(password, _l33t_table));\n\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      sub = ref[o];\n\n      if (this.empty(sub)) {\n        break;\n      }\n\n      subbed_password = this.translate(password, sub);\n      ref1 = this.dictionary_match(subbed_password, _ranked_dictionaries);\n\n      for (p = 0, len2 = ref1.length; p < len2; p++) {\n        match = ref1[p];\n        token = password.slice(match.i, +match.j + 1 || 9e9);\n\n        if (token.toLowerCase() === match.matched_word) {\n          continue;\n        }\n\n        match_sub = {};\n\n        for (subbed_chr in sub) {\n          chr = sub[subbed_chr];\n\n          if (token.indexOf(subbed_chr) !== -1) {\n            match_sub[subbed_chr] = chr;\n          }\n        }\n\n        match.l33t = true;\n        match.token = token;\n        match.sub = match_sub;\n\n        match.sub_display = function () {\n          var results;\n          results = [];\n\n          for (k in match_sub) {\n            v = match_sub[k];\n            results.push(k + \" -> \" + v);\n          }\n\n          return results;\n        }().join(', ');\n\n        matches.push(match);\n      }\n    }\n\n    return this.sorted(matches.filter(function (match) {\n      return match.token.length > 1;\n    }));\n  },\n  spatial_match: function (password, _graphs) {\n    var graph, graph_name, matches;\n\n    if (_graphs == null) {\n      _graphs = GRAPHS;\n    }\n\n    matches = [];\n\n    for (graph_name in _graphs) {\n      graph = _graphs[graph_name];\n      this.extend(matches, this.spatial_match_helper(password, graph, graph_name));\n    }\n\n    return this.sorted(matches);\n  },\n  SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/,\n  spatial_match_helper: function (password, graph, graph_name) {\n    var adj, adjacents, cur_char, cur_direction, found, found_direction, i, j, last_direction, len1, matches, o, prev_char, shifted_count, turns;\n    matches = [];\n    i = 0;\n\n    while (i < password.length - 1) {\n      j = i + 1;\n      last_direction = null;\n      turns = 0;\n\n      if ((graph_name === 'qwerty' || graph_name === 'dvorak') && this.SHIFTED_RX.exec(password.charAt(i))) {\n        shifted_count = 1;\n      } else {\n        shifted_count = 0;\n      }\n\n      while (true) {\n        prev_char = password.charAt(j - 1);\n        found = false;\n        found_direction = -1;\n        cur_direction = -1;\n        adjacents = graph[prev_char] || [];\n\n        if (j < password.length) {\n          cur_char = password.charAt(j);\n\n          for (o = 0, len1 = adjacents.length; o < len1; o++) {\n            adj = adjacents[o];\n            cur_direction += 1;\n\n            if (adj && adj.indexOf(cur_char) !== -1) {\n              found = true;\n              found_direction = cur_direction;\n\n              if (adj.indexOf(cur_char) === 1) {\n                shifted_count += 1;\n              }\n\n              if (last_direction !== found_direction) {\n                turns += 1;\n                last_direction = found_direction;\n              }\n\n              break;\n            }\n          }\n        }\n\n        if (found) {\n          j += 1;\n        } else {\n          if (j - i > 2) {\n            matches.push({\n              pattern: 'spatial',\n              i: i,\n              j: j - 1,\n              token: password.slice(i, j),\n              graph: graph_name,\n              turns: turns,\n              shifted_count: shifted_count\n            });\n          }\n\n          i = j;\n          break;\n        }\n      }\n    }\n\n    return matches;\n  },\n  repeat_match: function (password) {\n    var base_analysis, base_guesses, base_matches, base_token, greedy, greedy_match, i, j, lastIndex, lazy, lazy_anchored, lazy_match, match, matches, ref;\n    matches = [];\n    greedy = /(.+)\\1+/g;\n    lazy = /(.+?)\\1+/g;\n    lazy_anchored = /^(.+?)\\1+$/;\n    lastIndex = 0;\n\n    while (lastIndex < password.length) {\n      greedy.lastIndex = lazy.lastIndex = lastIndex;\n      greedy_match = greedy.exec(password);\n      lazy_match = lazy.exec(password);\n\n      if (greedy_match == null) {\n        break;\n      }\n\n      if (greedy_match[0].length > lazy_match[0].length) {\n        match = greedy_match;\n        base_token = lazy_anchored.exec(match[0])[1];\n      } else {\n        match = lazy_match;\n        base_token = match[1];\n      }\n\n      ref = [match.index, match.index + match[0].length - 1], i = ref[0], j = ref[1];\n      base_analysis = scoring.most_guessable_match_sequence(base_token, this.omnimatch(base_token));\n      base_matches = base_analysis.sequence;\n      base_guesses = base_analysis.guesses;\n      matches.push({\n        pattern: 'repeat',\n        i: i,\n        j: j,\n        token: match[0],\n        base_token: base_token,\n        base_guesses: base_guesses,\n        base_matches: base_matches,\n        repeat_count: match[0].length / base_token.length\n      });\n      lastIndex = j + 1;\n    }\n\n    return matches;\n  },\n  MAX_DELTA: 5,\n  sequence_match: function (password) {\n    var delta, i, j, k, last_delta, o, ref, result, update;\n\n    if (password.length === 1) {\n      return [];\n    }\n\n    update = function (_this) {\n      return function (i, j, delta) {\n        var ref, sequence_name, sequence_space, token;\n\n        if (j - i > 1 || Math.abs(delta) === 1) {\n          if (0 < (ref = Math.abs(delta)) && ref <= _this.MAX_DELTA) {\n            token = password.slice(i, +j + 1 || 9e9);\n\n            if (/^[a-z]+$/.test(token)) {\n              sequence_name = 'lower';\n              sequence_space = 26;\n            } else if (/^[A-Z]+$/.test(token)) {\n              sequence_name = 'upper';\n              sequence_space = 26;\n            } else if (/^\\d+$/.test(token)) {\n              sequence_name = 'digits';\n              sequence_space = 10;\n            } else {\n              sequence_name = 'unicode';\n              sequence_space = 26;\n            }\n\n            return result.push({\n              pattern: 'sequence',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              sequence_name: sequence_name,\n              sequence_space: sequence_space,\n              ascending: delta > 0\n            });\n          }\n        }\n      };\n    }(this);\n\n    result = [];\n    i = 0;\n    last_delta = null;\n\n    for (k = o = 1, ref = password.length; 1 <= ref ? o < ref : o > ref; k = 1 <= ref ? ++o : --o) {\n      delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n\n      if (last_delta == null) {\n        last_delta = delta;\n      }\n\n      if (delta === last_delta) {\n        continue;\n      }\n\n      j = k - 1;\n      update(i, j, last_delta);\n      i = j;\n      last_delta = delta;\n    }\n\n    update(i, password.length - 1, last_delta);\n    return result;\n  },\n  regex_match: function (password, _regexen) {\n    var matches, regex, rx_match, token;\n\n    if (_regexen == null) {\n      _regexen = REGEXEN;\n    }\n\n    matches = [];\n\n    for (name in _regexen) {\n      regex = _regexen[name];\n      regex.lastIndex = 0;\n\n      while (rx_match = regex.exec(password)) {\n        token = rx_match[0];\n        matches.push({\n          pattern: 'regex',\n          token: token,\n          i: rx_match.index,\n          j: rx_match.index + rx_match[0].length - 1,\n          regex_name: name,\n          regex_match: rx_match\n        });\n      }\n    }\n\n    return this.sorted(matches);\n  },\n  date_match: function (password) {\n    var best_candidate, candidate, candidates, distance, dmy, i, j, k, l, len1, len2, matches, maybe_date_no_separator, maybe_date_with_separator, metric, min_distance, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rx_match, s, t, token;\n    matches = [];\n    maybe_date_no_separator = /^\\d{4,8}$/;\n    maybe_date_with_separator = /^(\\d{1,4})([\\s\\/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/;\n\n    for (i = o = 0, ref = password.length - 4; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n      for (j = p = ref1 = i + 3, ref2 = i + 7; ref1 <= ref2 ? p <= ref2 : p >= ref2; j = ref1 <= ref2 ? ++p : --p) {\n        if (j >= password.length) {\n          break;\n        }\n\n        token = password.slice(i, +j + 1 || 9e9);\n\n        if (!maybe_date_no_separator.exec(token)) {\n          continue;\n        }\n\n        candidates = [];\n        ref3 = DATE_SPLITS[token.length];\n\n        for (q = 0, len1 = ref3.length; q < len1; q++) {\n          ref4 = ref3[q], k = ref4[0], l = ref4[1];\n          dmy = this.map_ints_to_dmy([parseInt(token.slice(0, k)), parseInt(token.slice(k, l)), parseInt(token.slice(l))]);\n\n          if (dmy != null) {\n            candidates.push(dmy);\n          }\n        }\n\n        if (!(candidates.length > 0)) {\n          continue;\n        }\n\n        best_candidate = candidates[0];\n\n        metric = function (candidate) {\n          return Math.abs(candidate.year - scoring.REFERENCE_YEAR);\n        };\n\n        min_distance = metric(candidates[0]);\n        ref5 = candidates.slice(1);\n\n        for (r = 0, len2 = ref5.length; r < len2; r++) {\n          candidate = ref5[r];\n          distance = metric(candidate);\n\n          if (distance < min_distance) {\n            ref6 = [candidate, distance], best_candidate = ref6[0], min_distance = ref6[1];\n          }\n        }\n\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: '',\n          year: best_candidate.year,\n          month: best_candidate.month,\n          day: best_candidate.day\n        });\n      }\n    }\n\n    for (i = s = 0, ref7 = password.length - 6; 0 <= ref7 ? s <= ref7 : s >= ref7; i = 0 <= ref7 ? ++s : --s) {\n      for (j = t = ref8 = i + 5, ref9 = i + 9; ref8 <= ref9 ? t <= ref9 : t >= ref9; j = ref8 <= ref9 ? ++t : --t) {\n        if (j >= password.length) {\n          break;\n        }\n\n        token = password.slice(i, +j + 1 || 9e9);\n        rx_match = maybe_date_with_separator.exec(token);\n\n        if (rx_match == null) {\n          continue;\n        }\n\n        dmy = this.map_ints_to_dmy([parseInt(rx_match[1]), parseInt(rx_match[3]), parseInt(rx_match[4])]);\n\n        if (dmy == null) {\n          continue;\n        }\n\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: rx_match[2],\n          year: dmy.year,\n          month: dmy.month,\n          day: dmy.day\n        });\n      }\n    }\n\n    return this.sorted(matches.filter(function (match) {\n      var is_submatch, len3, other_match, u;\n      is_submatch = false;\n\n      for (u = 0, len3 = matches.length; u < len3; u++) {\n        other_match = matches[u];\n\n        if (match === other_match) {\n          continue;\n        }\n\n        if (other_match.i <= match.i && other_match.j >= match.j) {\n          is_submatch = true;\n          break;\n        }\n      }\n\n      return !is_submatch;\n    }));\n  },\n  map_ints_to_dmy: function (ints) {\n    var dm, int, len1, len2, len3, o, over_12, over_31, p, possible_year_splits, q, ref, ref1, rest, under_1, y;\n\n    if (ints[1] > 31 || ints[1] <= 0) {\n      return;\n    }\n\n    over_12 = 0;\n    over_31 = 0;\n    under_1 = 0;\n\n    for (o = 0, len1 = ints.length; o < len1; o++) {\n      int = ints[o];\n\n      if (99 < int && int < DATE_MIN_YEAR || int > DATE_MAX_YEAR) {\n        return;\n      }\n\n      if (int > 31) {\n        over_31 += 1;\n      }\n\n      if (int > 12) {\n        over_12 += 1;\n      }\n\n      if (int <= 0) {\n        under_1 += 1;\n      }\n    }\n\n    if (over_31 >= 2 || over_12 === 3 || under_1 >= 2) {\n      return;\n    }\n\n    possible_year_splits = [[ints[2], ints.slice(0, 2)], [ints[0], ints.slice(1, 3)]];\n\n    for (p = 0, len2 = possible_year_splits.length; p < len2; p++) {\n      ref = possible_year_splits[p], y = ref[0], rest = ref[1];\n\n      if (DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR) {\n        dm = this.map_ints_to_dm(rest);\n\n        if (dm != null) {\n          return {\n            year: y,\n            month: dm.month,\n            day: dm.day\n          };\n        } else {\n          return;\n        }\n      }\n    }\n\n    for (q = 0, len3 = possible_year_splits.length; q < len3; q++) {\n      ref1 = possible_year_splits[q], y = ref1[0], rest = ref1[1];\n      dm = this.map_ints_to_dm(rest);\n\n      if (dm != null) {\n        y = this.two_to_four_digit_year(y);\n        return {\n          year: y,\n          month: dm.month,\n          day: dm.day\n        };\n      }\n    }\n  },\n  map_ints_to_dm: function (ints) {\n    var d, len1, m, o, ref, ref1;\n    ref = [ints, ints.slice().reverse()];\n\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      ref1 = ref[o], d = ref1[0], m = ref1[1];\n\n      if (1 <= d && d <= 31 && 1 <= m && m <= 12) {\n        return {\n          day: d,\n          month: m\n        };\n      }\n    }\n  },\n  two_to_four_digit_year: function (year) {\n    if (year > 99) {\n      return year;\n    } else if (year > 50) {\n      return year + 1900;\n    } else {\n      return year + 2000;\n    }\n  }\n};\nmodule.exports = matching;","map":{"version":3,"mappings":"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","names":["frequency_lists","require","adjacency_graphs","scoring","build_ranked_dict","ordered_list","result","i","RANKED_DICTIONARIES","lst","GRAPHS","qwerty","dvorak","keypad","mac_keypad","L33T_TABLE","a","b","c","e","g","l","o","s","t","x","z","REGEXEN","recent_year","DATE_MAX_YEAR","DATE_MIN_YEAR","DATE_SPLITS","matching","empty","obj","results","k","length","extend","lst2","push","apply","translate","string","chr_map","ref","chr","join","mod","n","m","sorted","matches","sort","m1","m2","j","omnimatch","password","matchers","dictionary_match","reverse_dictionary_match","l33t_match","spatial_match","repeat_match","sequence_match","regex_match","date_match","matcher","call","_ranked_dictionaries","len","password_lower","toLowerCase","ref1","ranked_dict","word","rank","pattern","token","matched_word","dictionary_name","reversed","l33t","reversed_password","split","reverse","match","set_user_input_dictionary","slice","relevant_l33t_subtable","table","password_chars","subtable","relevant_subs","p","sub","enumerate_l33t_subs","keys","subs","dedup","deduped","members","assoc","v","label","helper","first_key","rest_keys","next_subs","dup_l33t_index","l33t_chr","sub_extension","concat","sub_alternative","splice","sub_dicts","sub_dict","_l33t_table","subbed_password","match_sub","indexOf","subbed_chr","sub_display","filter","_graphs","spatial_match_helper","graph","graph_name","SHIFTED_RX","last_direction","turns","exec","charAt","shifted_count","prev_char","found","found_direction","cur_direction","adjacents","cur_char","adj","greedy","lazy","lazy_anchored","lastIndex","greedy_match","lazy_match","base_token","index","base_analysis","most_guessable_match_sequence","base_matches","sequence","base_guesses","guesses","repeat_count","MAX_DELTA","update","delta","Math","abs","_this","test","sequence_name","sequence_space","ascending","last_delta","charCodeAt","_regexen","regex","rx_match","regex_name","name","maybe_date_no_separator","maybe_date_with_separator","candidates","ref3","dmy","map_ints_to_dmy","parseInt","best_candidate","metric","candidate","year","REFERENCE_YEAR","min_distance","ref5","distance","ref6","separator","month","day","ref8","is_submatch","other_match","ints","over_12","over_31","under_1","int","possible_year_splits","y","rest","dm","map_ints_to_dm","two_to_four_digit_year","d","module","exports"],"sources":["C:\\Users\\Shrishti.s\\Desktop\\final_ecommerce_rtdb\\node_modules\\zxcvbn\\src\\matching.coffee"],"sourcesContent":["frequency_lists = require('./frequency_lists')\nadjacency_graphs = require('./adjacency_graphs')\nscoring = require('./scoring')\n\nbuild_ranked_dict = (ordered_list) ->\n  result = {}\n  i = 1 # rank starts at 1, not 0\n  for word in ordered_list\n    result[word] = i\n    i += 1\n  result\n\nRANKED_DICTIONARIES = {}\nfor name, lst of frequency_lists\n  RANKED_DICTIONARIES[name] = build_ranked_dict lst\n\nGRAPHS =\n  qwerty:     adjacency_graphs.qwerty\n  dvorak:     adjacency_graphs.dvorak\n  keypad:     adjacency_graphs.keypad\n  mac_keypad: adjacency_graphs.mac_keypad\n\nL33T_TABLE =\n  a: ['4', '@']\n  b: ['8']\n  c: ['(', '{', '[', '<']\n  e: ['3']\n  g: ['6', '9']\n  i: ['1', '!', '|']\n  l: ['1', '|', '7']\n  o: ['0']\n  s: ['$', '5']\n  t: ['+', '7']\n  x: ['%']\n  z: ['2']\n\nREGEXEN =\n  recent_year:  /19\\d\\d|200\\d|201\\d/g\n\nDATE_MAX_YEAR = 2050\nDATE_MIN_YEAR = 1000\nDATE_SPLITS =\n  4:[      # for length-4 strings, eg 1191 or 9111, two ways to split:\n    [1, 2] # 1 1 91 (2nd split starts at index 1, 3rd at index 2)\n    [2, 3] # 91 1 1\n    ]\n  5:[\n    [1, 3] # 1 11 91\n    [2, 3] # 11 1 91\n    ]\n  6:[\n    [1, 2] # 1 1 1991\n    [2, 4] # 11 11 91\n    [4, 5] # 1991 1 1\n    ]\n  7:[\n    [1, 3] # 1 11 1991\n    [2, 3] # 11 1 1991\n    [4, 5] # 1991 1 11\n    [4, 6] # 1991 11 1\n    ]\n  8:[\n    [2, 4] # 11 11 1991\n    [4, 6] # 1991 11 11\n    ]\n\nmatching =\n  empty: (obj) -> (k for k of obj).length == 0\n  extend: (lst, lst2) -> lst.push.apply lst, lst2\n  translate: (string, chr_map) -> (chr_map[chr] or chr for chr in string.split('')).join('')\n  mod: (n, m) -> ((n % m) + m) % m # mod impl that works for negative numbers\n  sorted: (matches) ->\n    # sort on i primary, j secondary\n    matches.sort (m1, m2) ->\n      (m1.i - m2.i) or (m1.j - m2.j)\n\n  # ------------------------------------------------------------------------------\n  # omnimatch -- combine everything ----------------------------------------------\n  # ------------------------------------------------------------------------------\n\n  omnimatch: (password) ->\n    matches = []\n    matchers = [\n      @dictionary_match\n      @reverse_dictionary_match\n      @l33t_match\n      @spatial_match\n      @repeat_match\n      @sequence_match\n      @regex_match\n      @date_match\n    ]\n    for matcher in matchers\n      @extend matches, matcher.call(this, password)\n    @sorted matches\n\n  #-------------------------------------------------------------------------------\n  # dictionary match (common passwords, english, last names, etc) ----------------\n  #-------------------------------------------------------------------------------\n\n  dictionary_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES) ->\n    # _ranked_dictionaries variable is for unit testing purposes\n    matches = []\n    len = password.length\n    password_lower = password.toLowerCase()\n    for dictionary_name, ranked_dict of _ranked_dictionaries\n      for i in [0...len]\n        for j in [i...len]\n          if password_lower[i..j] of ranked_dict\n            word = password_lower[i..j]\n            rank = ranked_dict[word]\n            matches.push\n              pattern: 'dictionary'\n              i: i\n              j: j\n              token: password[i..j]\n              matched_word: word\n              rank: rank\n              dictionary_name: dictionary_name\n              reversed: false\n              l33t: false\n    @sorted matches\n\n  reverse_dictionary_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES) ->\n    reversed_password = password.split('').reverse().join('')\n    matches = @dictionary_match reversed_password, _ranked_dictionaries\n    for match in matches\n      match.token = match.token.split('').reverse().join('') # reverse back\n      match.reversed = true\n      # map coordinates back to original string\n      [match.i, match.j] = [\n        password.length - 1 - match.j\n        password.length - 1 - match.i\n      ]\n    @sorted matches\n\n  set_user_input_dictionary: (ordered_list) ->\n    RANKED_DICTIONARIES['user_inputs'] = build_ranked_dict ordered_list.slice()\n\n  #-------------------------------------------------------------------------------\n  # dictionary match with common l33t substitutions ------------------------------\n  #-------------------------------------------------------------------------------\n\n  # makes a pruned copy of l33t_table that only includes password's possible substitutions\n  relevant_l33t_subtable: (password, table) ->\n    password_chars = {}\n    for chr in password.split('')\n      password_chars[chr] = true\n    subtable = {}\n    for letter, subs of table\n      relevant_subs = (sub for sub in subs when sub of password_chars)\n      if relevant_subs.length > 0\n        subtable[letter] = relevant_subs\n    subtable\n\n  # returns the list of possible 1337 replacement dictionaries for a given password\n  enumerate_l33t_subs: (table) ->\n    keys = (k for k of table)\n    subs = [[]]\n\n    dedup = (subs) ->\n      deduped = []\n      members = {}\n      for sub in subs\n        assoc = ([k,v] for k,v in sub)\n        assoc.sort()\n        label = (k+','+v for k,v in assoc).join('-')\n        unless label of members\n          members[label] = true\n          deduped.push sub\n      deduped\n\n    helper = (keys) ->\n      return if not keys.length\n      first_key = keys[0]\n      rest_keys = keys[1..]\n      next_subs = []\n      for l33t_chr in table[first_key]\n        for sub in subs\n          dup_l33t_index = -1\n          for i in [0...sub.length]\n            if sub[i][0] == l33t_chr\n              dup_l33t_index = i\n              break\n          if dup_l33t_index == -1\n            sub_extension = sub.concat [[l33t_chr, first_key]]\n            next_subs.push sub_extension\n          else\n            sub_alternative = sub.slice(0)\n            sub_alternative.splice(dup_l33t_index, 1)\n            sub_alternative.push [l33t_chr, first_key]\n            next_subs.push sub\n            next_subs.push sub_alternative\n      subs = dedup next_subs\n      helper(rest_keys)\n\n    helper(keys)\n    sub_dicts = [] # convert from assoc lists to dicts\n    for sub in subs\n      sub_dict = {}\n      for [l33t_chr, chr] in sub\n        sub_dict[l33t_chr] = chr\n      sub_dicts.push sub_dict\n    sub_dicts\n\n  l33t_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES, _l33t_table = L33T_TABLE) ->\n    matches = []\n    for sub in @enumerate_l33t_subs @relevant_l33t_subtable(password, _l33t_table)\n      break if @empty sub # corner case: password has no relevant subs.\n      subbed_password = @translate password, sub\n      for match in @dictionary_match(subbed_password, _ranked_dictionaries)\n        token = password[match.i..match.j]\n        if token.toLowerCase() == match.matched_word\n          continue # only return the matches that contain an actual substitution\n        match_sub = {} # subset of mappings in sub that are in use for this match\n        for subbed_chr, chr of sub when token.indexOf(subbed_chr) != -1\n          match_sub[subbed_chr] = chr\n        match.l33t = true\n        match.token = token\n        match.sub = match_sub\n        match.sub_display = (\"#{k} -> #{v}\" for k,v of match_sub).join(', ')\n        matches.push match\n    @sorted matches.filter (match) ->\n      # filter single-character l33t matches to reduce noise.\n      # otherwise '1' matches 'i', '4' matches 'a', both very common English words\n      # with low dictionary rank.\n      match.token.length > 1\n\n  # ------------------------------------------------------------------------------\n  # spatial match (qwerty/dvorak/keypad) -----------------------------------------\n  # ------------------------------------------------------------------------------\n\n  spatial_match: (password, _graphs = GRAPHS) ->\n    matches = []\n    for graph_name, graph of _graphs\n      @extend matches, @spatial_match_helper(password, graph, graph_name)\n    @sorted matches\n\n  SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/\n  spatial_match_helper: (password, graph, graph_name) ->\n    matches = []\n    i = 0\n    while i < password.length - 1\n      j = i + 1\n      last_direction = null\n      turns = 0\n      if graph_name in ['qwerty', 'dvorak'] and @SHIFTED_RX.exec(password.charAt(i))\n        # initial character is shifted\n        shifted_count = 1\n      else\n        shifted_count = 0\n      loop\n        prev_char = password.charAt(j-1)\n        found = false\n        found_direction = -1\n        cur_direction = -1\n        adjacents = graph[prev_char] or []\n        # consider growing pattern by one character if j hasn't gone over the edge.\n        if j < password.length\n          cur_char = password.charAt(j)\n          for adj in adjacents\n            cur_direction += 1\n            if adj and adj.indexOf(cur_char) != -1\n              found = true\n              found_direction = cur_direction\n              if adj.indexOf(cur_char) == 1\n                # index 1 in the adjacency means the key is shifted,\n                # 0 means unshifted: A vs a, % vs 5, etc.\n                # for example, 'q' is adjacent to the entry '2@'.\n                # @ is shifted w/ index 1, 2 is unshifted.\n                shifted_count += 1\n              if last_direction != found_direction\n                # adding a turn is correct even in the initial case when last_direction is null:\n                # every spatial pattern starts with a turn.\n                turns += 1\n                last_direction = found_direction\n              break\n        # if the current pattern continued, extend j and try to grow again\n        if found\n          j += 1\n        # otherwise push the pattern discovered so far, if any...\n        else\n          if j - i > 2 # don't consider length 1 or 2 chains.\n            matches.push\n              pattern: 'spatial'\n              i: i\n              j: j-1\n              token: password[i...j]\n              graph: graph_name\n              turns: turns\n              shifted_count: shifted_count\n          # ...and then start a new search for the rest of the password.\n          i = j\n          break\n    matches\n\n  #-------------------------------------------------------------------------------\n  # repeats (aaa, abcabcabc) and sequences (abcdef) ------------------------------\n  #-------------------------------------------------------------------------------\n\n  repeat_match: (password) ->\n    matches = []\n    greedy = /(.+)\\1+/g\n    lazy = /(.+?)\\1+/g\n    lazy_anchored = /^(.+?)\\1+$/\n    lastIndex = 0\n    while lastIndex < password.length\n      greedy.lastIndex = lazy.lastIndex = lastIndex\n      greedy_match = greedy.exec password\n      lazy_match = lazy.exec password\n      break unless greedy_match?\n      if greedy_match[0].length > lazy_match[0].length\n        # greedy beats lazy for 'aabaab'\n        #   greedy: [aabaab, aab]\n        #   lazy:   [aa,     a]\n        match = greedy_match\n        # greedy's repeated string might itself be repeated, eg.\n        # aabaab in aabaabaabaab.\n        # run an anchored lazy match on greedy's repeated string\n        # to find the shortest repeated string\n        base_token = lazy_anchored.exec(match[0])[1]\n      else\n        # lazy beats greedy for 'aaaaa'\n        #   greedy: [aaaa,  aa]\n        #   lazy:   [aaaaa, a]\n        match = lazy_match\n        base_token = match[1]\n      [i, j] = [match.index, match.index + match[0].length - 1]\n      # recursively match and score the base string\n      base_analysis = scoring.most_guessable_match_sequence(\n        base_token\n        @omnimatch base_token\n      )\n      base_matches = base_analysis.sequence\n      base_guesses = base_analysis.guesses\n      matches.push\n        pattern: 'repeat'\n        i: i\n        j: j\n        token: match[0]\n        base_token: base_token\n        base_guesses: base_guesses\n        base_matches: base_matches\n        repeat_count: match[0].length / base_token.length\n      lastIndex = j + 1\n    matches\n\n  MAX_DELTA: 5\n  sequence_match: (password) ->\n    # Identifies sequences by looking for repeated differences in unicode codepoint.\n    # this allows skipping, such as 9753, and also matches some extended unicode sequences\n    # such as Greek and Cyrillic alphabets.\n    #\n    # for example, consider the input 'abcdb975zy'\n    #\n    # password: a   b   c   d   b    9   7   5   z   y\n    # index:    0   1   2   3   4    5   6   7   8   9\n    # delta:      1   1   1  -2  -41  -2  -2  69   1\n    #\n    # expected result:\n    # [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n\n    return [] if password.length == 1\n\n    update = (i, j, delta) =>\n      if j - i > 1 or Math.abs(delta) == 1\n        if 0 < Math.abs(delta) <= @MAX_DELTA\n          token = password[i..j]\n          if /^[a-z]+$/.test(token)\n            sequence_name = 'lower'\n            sequence_space = 26\n          else if /^[A-Z]+$/.test(token)\n            sequence_name = 'upper'\n            sequence_space = 26\n          else if /^\\d+$/.test(token)\n            sequence_name = 'digits'\n            sequence_space = 10\n          else\n            # conservatively stick with roman alphabet size.\n            # (this could be improved)\n            sequence_name = 'unicode'\n            sequence_space = 26\n          result.push\n            pattern: 'sequence'\n            i: i\n            j: j\n            token: password[i..j]\n            sequence_name: sequence_name\n            sequence_space: sequence_space\n            ascending: delta > 0\n\n    result = []\n    i = 0\n    last_delta = null\n\n    for k in [1...password.length]\n      delta = password.charCodeAt(k) - password.charCodeAt(k - 1)\n      unless last_delta?\n        last_delta = delta\n      continue if delta == last_delta\n      j = k - 1\n      update(i, j, last_delta)\n      i = j\n      last_delta = delta\n    update(i, password.length - 1, last_delta)\n    result\n\n  #-------------------------------------------------------------------------------\n  # regex matching ---------------------------------------------------------------\n  #-------------------------------------------------------------------------------\n\n  regex_match: (password, _regexen = REGEXEN) ->\n    matches = []\n    for name, regex of _regexen\n      regex.lastIndex = 0 # keeps regex_match stateless\n      while rx_match = regex.exec password\n        token = rx_match[0]\n        matches.push\n          pattern: 'regex'\n          token: token\n          i: rx_match.index\n          j: rx_match.index + rx_match[0].length - 1\n          regex_name: name\n          regex_match: rx_match\n    @sorted matches\n\n  #-------------------------------------------------------------------------------\n  # date matching ----------------------------------------------------------------\n  #-------------------------------------------------------------------------------\n\n  date_match: (password) ->\n    # a \"date\" is recognized as:\n    #   any 3-tuple that starts or ends with a 2- or 4-digit year,\n    #   with 2 or 0 separator chars (1.1.91 or 1191),\n    #   maybe zero-padded (01-01-91 vs 1-1-91),\n    #   a month between 1 and 12,\n    #   a day between 1 and 31.\n    #\n    # note: this isn't true date parsing in that \"feb 31st\" is allowed,\n    # this doesn't check for leap years, etc.\n    #\n    # recipe:\n    # start with regex to find maybe-dates, then attempt to map the integers\n    # onto month-day-year to filter the maybe-dates into dates.\n    # finally, remove matches that are substrings of other matches to reduce noise.\n    #\n    # note: instead of using a lazy or greedy regex to find many dates over the full string,\n    # this uses a ^...$ regex against every substring of the password -- less performant but leads\n    # to every possible date match.\n    matches = []\n    maybe_date_no_separator = /^\\d{4,8}$/\n    maybe_date_with_separator = ///\n      ^\n      ( \\d{1,4} )    # day, month, year\n      ( [\\s/\\\\_.-] ) # separator\n      ( \\d{1,2} )    # day, month\n      \\2             # same separator\n      ( \\d{1,4} )    # day, month, year\n      $\n    ///\n\n    # dates without separators are between length 4 '1191' and 8 '11111991'\n    for i in [0..password.length - 4]\n      for j in [i + 3..i + 7]\n        break if j >= password.length\n        token = password[i..j]\n        continue unless maybe_date_no_separator.exec token\n        candidates = []\n        for [k,l] in DATE_SPLITS[token.length]\n          dmy = @map_ints_to_dmy [\n            parseInt token[0...k]\n            parseInt token[k...l]\n            parseInt token[l...]\n          ]\n          candidates.push dmy if dmy?\n        continue unless candidates.length > 0\n        # at this point: different possible dmy mappings for the same i,j substring.\n        # match the candidate date that likely takes the fewest guesses: a year closest to 2000.\n        # (scoring.REFERENCE_YEAR).\n        #\n        # ie, considering '111504', prefer 11-15-04 to 1-1-1504\n        # (interpreting '04' as 2004)\n        best_candidate = candidates[0]\n        metric = (candidate) -> Math.abs candidate.year - scoring.REFERENCE_YEAR\n        min_distance = metric candidates[0]\n        for candidate in candidates[1..]\n          distance = metric candidate\n          if distance < min_distance\n            [best_candidate, min_distance] = [candidate, distance]\n        matches.push\n          pattern: 'date'\n          token: token\n          i: i\n          j: j\n          separator: ''\n          year: best_candidate.year\n          month: best_candidate.month\n          day: best_candidate.day\n\n    # dates with separators are between length 6 '1/1/91' and 10 '11/11/1991'\n    for i in [0..password.length - 6]\n      for j in [i + 5..i + 9]\n        break if j >= password.length\n        token = password[i..j]\n        rx_match = maybe_date_with_separator.exec token\n        continue unless rx_match?\n        dmy = @map_ints_to_dmy [\n          parseInt rx_match[1]\n          parseInt rx_match[3]\n          parseInt rx_match[4]\n        ]\n        continue unless dmy?\n        matches.push\n          pattern: 'date'\n          token: token\n          i: i\n          j: j\n          separator: rx_match[2]\n          year: dmy.year\n          month: dmy.month\n          day: dmy.day\n\n    # matches now contains all valid date strings in a way that is tricky to capture\n    # with regexes only. while thorough, it will contain some unintuitive noise:\n    #\n    # '2015_06_04', in addition to matching 2015_06_04, will also contain\n    # 5(!) other date matches: 15_06_04, 5_06_04, ..., even 2015 (matched as 5/1/2020)\n    #\n    # to reduce noise, remove date matches that are strict substrings of others\n    @sorted matches.filter (match) ->\n      is_submatch = false\n      for other_match in matches\n        continue if match is other_match\n        if other_match.i <= match.i and other_match.j >= match.j\n          is_submatch = true\n          break\n      not is_submatch\n\n  map_ints_to_dmy: (ints) ->\n    # given a 3-tuple, discard if:\n    #   middle int is over 31 (for all dmy formats, years are never allowed in the middle)\n    #   middle int is zero\n    #   any int is over the max allowable year\n    #   any int is over two digits but under the min allowable year\n    #   2 ints are over 31, the max allowable day\n    #   2 ints are zero\n    #   all ints are over 12, the max allowable month\n    return if ints[1] > 31 or ints[1] <= 0\n    over_12 = 0\n    over_31 = 0\n    under_1 = 0\n    for int in ints\n      return if 99 < int < DATE_MIN_YEAR or int > DATE_MAX_YEAR\n      over_31 += 1 if int > 31\n      over_12 += 1 if int > 12\n      under_1 += 1 if int <= 0\n    return if over_31 >= 2 or over_12 == 3 or under_1 >= 2\n\n    # first look for a four digit year: yyyy + daymonth or daymonth + yyyy\n    possible_year_splits = [\n      [ints[2], ints[0..1]] # year last\n      [ints[0], ints[1..2]] # year first\n    ]\n    for [y, rest] in possible_year_splits\n      if DATE_MIN_YEAR <= y <= DATE_MAX_YEAR\n        dm = @map_ints_to_dm rest\n        if dm?\n          return {\n            year: y\n            month: dm.month\n            day: dm.day\n          }\n        else\n          # for a candidate that includes a four-digit year,\n          # when the remaining ints don't match to a day and month,\n          # it is not a date.\n          return\n\n    # given no four-digit year, two digit years are the most flexible int to match, so\n    # try to parse a day-month out of ints[0..1] or ints[1..0]\n    for [y, rest] in possible_year_splits\n      dm = @map_ints_to_dm rest\n      if dm?\n        y = @two_to_four_digit_year y\n        return {\n          year: y\n          month: dm.month\n          day: dm.day\n        }\n\n  map_ints_to_dm: (ints) ->\n    for [d, m] in [ints, ints.slice().reverse()]\n      if 1 <= d <= 31 and 1 <= m <= 12\n        return {\n          day: d\n          month: m\n        }\n\n  two_to_four_digit_year: (year) ->\n    if year > 99\n      year\n    else if year > 50\n      # 87 -> 1987\n      year + 1900\n    else\n      # 15 -> 2015\n      year + 2000\n\nmodule.exports = matching\n"]},"metadata":{},"sourceType":"script"}