"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphiQLInterface = exports.GraphiQL = void 0;
var react_1 = __importStar(require("react"));
var react_2 = require("@graphiql/react");
var majorVersion = parseInt(react_1.default.version.slice(0, 2), 10);
if (majorVersion < 16) {
    throw Error([
        'GraphiQL 0.18.0 and after is not compatible with React 15 or below.',
        'If you are using a CDN source (jsdelivr, unpkg, etc), follow this example:',
        'https://github.com/graphql/graphiql/blob/master/examples/graphiql-cdn/index.html#L49',
    ].join('\n'));
}
function GraphiQL(_a) {
    var dangerouslyAssumeSchemaIsValid = _a.dangerouslyAssumeSchemaIsValid, defaultQuery = _a.defaultQuery, docExplorerOpen = _a.docExplorerOpen, externalFragments = _a.externalFragments, fetcher = _a.fetcher, headers = _a.headers, inputValueDeprecation = _a.inputValueDeprecation, introspectionQueryName = _a.introspectionQueryName, maxHistoryLength = _a.maxHistoryLength, onEditOperationName = _a.onEditOperationName, onSchemaChange = _a.onSchemaChange, onTabChange = _a.onTabChange, onToggleHistory = _a.onToggleHistory, onToggleDocs = _a.onToggleDocs, operationName = _a.operationName, query = _a.query, response = _a.response, storage = _a.storage, schema = _a.schema, schemaDescription = _a.schemaDescription, shouldPersistHeaders = _a.shouldPersistHeaders, validationRules = _a.validationRules, variables = _a.variables, props = __rest(_a, ["dangerouslyAssumeSchemaIsValid", "defaultQuery", "docExplorerOpen", "externalFragments", "fetcher", "headers", "inputValueDeprecation", "introspectionQueryName", "maxHistoryLength", "onEditOperationName", "onSchemaChange", "onTabChange", "onToggleHistory", "onToggleDocs", "operationName", "query", "response", "storage", "schema", "schemaDescription", "shouldPersistHeaders", "validationRules", "variables"]);
    if (typeof fetcher !== 'function') {
        throw new TypeError('GraphiQL requires a fetcher function.');
    }
    return (react_1.default.createElement(react_2.StorageContextProvider, { storage: storage },
        react_1.default.createElement(react_2.HistoryContextProvider, { maxHistoryLength: maxHistoryLength, onToggle: onToggleHistory },
            react_1.default.createElement(react_2.EditorContextProvider, { defaultQuery: defaultQuery, externalFragments: externalFragments, headers: headers, onEditOperationName: onEditOperationName, onTabChange: onTabChange, query: query, response: response, shouldPersistHeaders: shouldPersistHeaders, validationRules: validationRules, variables: variables },
                react_1.default.createElement(react_2.SchemaContextProvider, { dangerouslyAssumeSchemaIsValid: dangerouslyAssumeSchemaIsValid, fetcher: fetcher, inputValueDeprecation: inputValueDeprecation, introspectionQueryName: introspectionQueryName, onSchemaChange: onSchemaChange, schema: schema, schemaDescription: schemaDescription },
                    react_1.default.createElement(react_2.ExecutionContextProvider, { fetcher: fetcher, operationName: operationName },
                        react_1.default.createElement(react_2.ExplorerContextProvider, { isVisible: docExplorerOpen, onToggleVisibility: onToggleDocs },
                            react_1.default.createElement(GraphiQLInterface, __assign({}, props)))))))));
}
exports.GraphiQL = GraphiQL;
GraphiQL.Logo = GraphiQLLogo;
GraphiQL.Toolbar = GraphiQLToolbar;
GraphiQL.Footer = GraphiQLFooter;
function GraphiQLInterface(props) {
    var _a, _b;
    var editorContext = (0, react_2.useEditorContext)({ nonNull: true });
    var executionContext = (0, react_2.useExecutionContext)({ nonNull: true });
    var explorerContext = (0, react_2.useExplorerContext)();
    var historyContext = (0, react_2.useHistoryContext)();
    var schemaContext = (0, react_2.useSchemaContext)({ nonNull: true });
    var storageContext = (0, react_2.useStorageContext)();
    var copy = (0, react_2.useCopyQuery)({ onCopyQuery: props.onCopyQuery });
    var merge = (0, react_2.useMergeQuery)();
    var prettify = (0, react_2.usePrettifyEditors)();
    var _c = (0, react_2.useTheme)(), theme = _c.theme, setTheme = _c.setTheme;
    var pluginResize = (0, react_2.useDragResize)({
        defaultSizeRelation: 1 / 3,
        direction: 'horizontal',
        initiallyHidden: (explorerContext === null || explorerContext === void 0 ? void 0 : explorerContext.isVisible) || (historyContext === null || historyContext === void 0 ? void 0 : historyContext.isVisible)
            ? undefined
            : 'first',
        onHiddenElementChange: function (resizableElement) {
            if (resizableElement === 'first') {
                explorerContext === null || explorerContext === void 0 ? void 0 : explorerContext.hide();
                historyContext === null || historyContext === void 0 ? void 0 : historyContext.hide();
            }
        },
        sizeThresholdSecond: 200,
        storageKey: 'docExplorerFlex',
    });
    var editorResize = (0, react_2.useDragResize)({
        direction: 'horizontal',
        storageKey: 'editorFlex',
    });
    var editorToolsResize = (0, react_2.useDragResize)({
        defaultSizeRelation: 3,
        direction: 'vertical',
        initiallyHidden: (function () {
            if (props.defaultVariableEditorOpen !== undefined) {
                return props.defaultVariableEditorOpen ? undefined : 'second';
            }
            if (props.defaultSecondaryEditorOpen !== undefined) {
                return props.defaultSecondaryEditorOpen ? undefined : 'second';
            }
            return editorContext.initialVariables || editorContext.initialHeaders
                ? undefined
                : 'second';
        })(),
        sizeThresholdSecond: 60,
        storageKey: 'secondaryEditorFlex',
    });
    var _d = __read((0, react_1.useState)('variable'), 2), activeSecondaryEditor = _d[0], setActiveSecondaryEditor = _d[1];
    var _e = __read((0, react_1.useState)(null), 2), showDialog = _e[0], setShowDialog = _e[1];
    var _f = __read((0, react_1.useState)(null), 2), clearStorageStatus = _f[0], setClearStorageStatus = _f[1];
    var children = react_1.default.Children.toArray(props.children);
    var logo = children.find(function (child) {
        return isChildComponentType(child, GraphiQL.Logo);
    }) || react_1.default.createElement(GraphiQL.Logo, null);
    var toolbar = children.find(function (child) {
        return isChildComponentType(child, GraphiQL.Toolbar);
    }) || (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(react_2.ToolbarButton, { onClick: function () { return prettify(); }, label: "Prettify query (Shift-Ctrl-P)" },
            react_1.default.createElement(react_2.PrettifyIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })),
        react_1.default.createElement(react_2.ToolbarButton, { onClick: function () { return merge(); }, label: "Merge fragments into query (Shift-Ctrl-M)" },
            react_1.default.createElement(react_2.MergeIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })),
        react_1.default.createElement(react_2.ToolbarButton, { onClick: function () { return copy(); }, label: "Copy query (Shift-Ctrl-C)" },
            react_1.default.createElement(react_2.CopyIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })),
        ((_a = props.toolbar) === null || _a === void 0 ? void 0 : _a.additionalContent)
            ? props.toolbar.additionalContent
            : null));
    var footer = children.find(function (child) {
        return isChildComponentType(child, GraphiQL.Footer);
    });
    var headerEditorEnabled = (_b = props.headerEditorEnabled) !== null && _b !== void 0 ? _b : true;
    var onClickReference = function () {
        if (pluginResize.hiddenElement === 'first') {
            pluginResize.setHiddenElement(null);
        }
    };
    var modifier = window.navigator.platform.toLowerCase().indexOf('mac') === 0 ? (react_1.default.createElement("code", { className: "graphiql-key" }, "Cmd")) : (react_1.default.createElement("code", { className: "graphiql-key" }, "Ctrl"));
    return (react_1.default.createElement("div", { "data-testid": "graphiql-container", className: "graphiql-container" },
        react_1.default.createElement("div", { className: "graphiql-sidebar" },
            react_1.default.createElement("div", null,
                explorerContext ? (react_1.default.createElement(react_2.Tooltip, { label: explorerContext.isVisible
                        ? 'Hide Documentation Explorer'
                        : 'Show Documentation Explorer' },
                    react_1.default.createElement(react_2.UnStyledButton, { className: explorerContext.isVisible ? 'active' : '', onClick: function () {
                            if (explorerContext === null || explorerContext === void 0 ? void 0 : explorerContext.isVisible) {
                                explorerContext === null || explorerContext === void 0 ? void 0 : explorerContext.hide();
                                pluginResize.setHiddenElement('first');
                            }
                            else {
                                explorerContext === null || explorerContext === void 0 ? void 0 : explorerContext.show();
                                pluginResize.setHiddenElement(null);
                                if (historyContext === null || historyContext === void 0 ? void 0 : historyContext.isVisible) {
                                    historyContext.hide();
                                }
                            }
                        }, "aria-label": explorerContext.isVisible
                            ? 'Hide Documentation Explorer'
                            : 'Show Documentation Explorer' },
                        react_1.default.createElement(react_2.DocsIcon, { "aria-hidden": "true" })))) : null,
                historyContext ? (react_1.default.createElement(react_2.Tooltip, { label: historyContext.isVisible ? 'Hide History' : 'Show History' },
                    react_1.default.createElement(react_2.UnStyledButton, { className: historyContext.isVisible ? 'active' : '', onClick: function () {
                            if (!historyContext) {
                                return;
                            }
                            historyContext.toggle();
                            if (historyContext.isVisible) {
                                pluginResize.setHiddenElement('first');
                            }
                            else {
                                pluginResize.setHiddenElement(null);
                                if (explorerContext === null || explorerContext === void 0 ? void 0 : explorerContext.isVisible) {
                                    explorerContext.hide();
                                }
                            }
                        }, "aria-label": historyContext.isVisible ? 'Hide History' : 'Show History' },
                        react_1.default.createElement(react_2.HistoryIcon, { "aria-hidden": "true" })))) : null),
            react_1.default.createElement("div", null,
                react_1.default.createElement(react_2.Tooltip, { label: "Re-fetch GraphQL schema" },
                    react_1.default.createElement(react_2.UnStyledButton, { disabled: schemaContext.isFetching, onClick: function () { return schemaContext.introspect(); }, "aria-label": "Re-fetch GraphQL schema" },
                        react_1.default.createElement(react_2.ReloadIcon, { className: schemaContext.isFetching ? 'graphiql-spin' : '', "aria-hidden": "true" }))),
                react_1.default.createElement(react_2.Tooltip, { label: "Open short keys dialog" },
                    react_1.default.createElement(react_2.UnStyledButton, { onClick: function () { return setShowDialog('short-keys'); }, "aria-label": "Open short keys dialog" },
                        react_1.default.createElement(react_2.KeyboardShortcutIcon, { "aria-hidden": "true" }))),
                react_1.default.createElement(react_2.Tooltip, { label: "Open settings dialog" },
                    react_1.default.createElement(react_2.UnStyledButton, { onClick: function () { return setShowDialog('settings'); }, "aria-label": "Open settings dialog" },
                        react_1.default.createElement(react_2.SettingsIcon, { "aria-hidden": "true" }))))),
        react_1.default.createElement("div", { className: "graphiql-main" },
            react_1.default.createElement("div", { ref: pluginResize.firstRef, style: {
                    minWidth: '200px',
                } },
                react_1.default.createElement("div", { className: "graphiql-plugin" },
                    (explorerContext === null || explorerContext === void 0 ? void 0 : explorerContext.isVisible) ? react_1.default.createElement(react_2.DocExplorer, null) : null,
                    (historyContext === null || historyContext === void 0 ? void 0 : historyContext.isVisible) ? react_1.default.createElement(react_2.History, null) : null)),
            react_1.default.createElement("div", { ref: pluginResize.dragBarRef }, (explorerContext === null || explorerContext === void 0 ? void 0 : explorerContext.isVisible) || (historyContext === null || historyContext === void 0 ? void 0 : historyContext.isVisible) ? (react_1.default.createElement("div", { className: "graphiql-horizontal-drag-bar" })) : null),
            react_1.default.createElement("div", { ref: pluginResize.secondRef },
                react_1.default.createElement("div", { className: "graphiql-sessions" },
                    react_1.default.createElement("div", { className: "graphiql-session-header" },
                        react_1.default.createElement(react_2.Tabs, { "aria-label": "Select active operation" }, editorContext.tabs.length > 1 ? (react_1.default.createElement(react_1.default.Fragment, null,
                            editorContext.tabs.map(function (tab, index) { return (react_1.default.createElement(react_2.Tab, { key: tab.id, isActive: index === editorContext.activeTabIndex },
                                react_1.default.createElement(react_2.Tab.Button, { "aria-controls": "graphiql-session", id: "graphiql-session-tab-".concat(index), onClick: function () {
                                        executionContext.stop();
                                        editorContext.changeTab(index);
                                    } }, tab.title),
                                react_1.default.createElement(react_2.Tab.Close, { onClick: function () {
                                        if (editorContext.activeTabIndex === index) {
                                            executionContext.stop();
                                        }
                                        editorContext.closeTab(index);
                                    } }))); }),
                            react_1.default.createElement(react_2.Tooltip, { label: "Add tab" },
                                react_1.default.createElement(react_2.UnStyledButton, { className: "graphiql-tab-add", onClick: function () { return editorContext.addTab(); }, "aria-label": "Add tab" },
                                    react_1.default.createElement(react_2.PlusIcon, { "aria-hidden": "true" }))))) : null),
                        react_1.default.createElement("div", { className: "graphiql-session-header-right" },
                            editorContext.tabs.length === 1 ? (react_1.default.createElement(react_2.Tooltip, { label: "Add tab" },
                                react_1.default.createElement(react_2.UnStyledButton, { className: "graphiql-tab-add", onClick: function () { return editorContext.addTab(); }, "aria-label": "Add tab" },
                                    react_1.default.createElement(react_2.PlusIcon, { "aria-hidden": "true" })))) : null,
                            react_1.default.createElement("div", { className: "graphiql-logo" }, logo))),
                    react_1.default.createElement("div", { role: "tabpanel", id: "graphiql-session", className: "graphiql-session", "aria-labelledby": "graphiql-session-tab-".concat(editorContext.activeTabIndex) },
                        react_1.default.createElement("div", { ref: editorResize.firstRef },
                            react_1.default.createElement("div", { className: "graphiql-editors".concat(editorContext.tabs.length === 1 ? ' full-height' : '') },
                                react_1.default.createElement("div", { ref: editorToolsResize.firstRef },
                                    react_1.default.createElement("section", { className: "graphiql-query-editor", "aria-label": "Query Editor" },
                                        react_1.default.createElement("div", { className: "graphiql-query-editor-wrapper" },
                                            react_1.default.createElement(react_2.QueryEditor, { editorTheme: props.editorTheme, keyMap: props.keyMap, onClickReference: onClickReference, onCopyQuery: props.onCopyQuery, onEdit: props.onEditQuery, readOnly: props.readOnly })),
                                        react_1.default.createElement("div", { className: "graphiql-toolbar", role: "toolbar", "aria-label": "Editor Commands" },
                                            react_1.default.createElement(react_2.ExecuteButton, null),
                                            toolbar))),
                                react_1.default.createElement("div", { ref: editorToolsResize.dragBarRef },
                                    react_1.default.createElement("div", { className: "graphiql-editor-tools" },
                                        react_1.default.createElement("div", { className: "graphiql-editor-tools-tabs" },
                                            react_1.default.createElement(react_2.UnStyledButton, { className: activeSecondaryEditor === 'variable' ? 'active' : '', onClick: function () {
                                                    if (editorToolsResize.hiddenElement === 'second') {
                                                        editorToolsResize.setHiddenElement(null);
                                                    }
                                                    setActiveSecondaryEditor('variable');
                                                } }, "Variables"),
                                            headerEditorEnabled ? (react_1.default.createElement(react_2.UnStyledButton, { className: activeSecondaryEditor === 'header' ? 'active' : '', onClick: function () {
                                                    if (editorToolsResize.hiddenElement === 'second') {
                                                        editorToolsResize.setHiddenElement(null);
                                                    }
                                                    setActiveSecondaryEditor('header');
                                                } }, "Headers")) : null),
                                        react_1.default.createElement(react_2.Tooltip, { label: editorToolsResize.hiddenElement === 'second'
                                                ? 'Show editor tools'
                                                : 'Hide editor tools' },
                                            react_1.default.createElement(react_2.UnStyledButton, { onClick: function () {
                                                    editorToolsResize.setHiddenElement(editorToolsResize.hiddenElement === 'second'
                                                        ? null
                                                        : 'second');
                                                }, "aria-label": editorToolsResize.hiddenElement === 'second'
                                                    ? 'Show editor tools'
                                                    : 'Hide editor tools' }, editorToolsResize.hiddenElement === 'second' ? (react_1.default.createElement(react_2.ChevronUpIcon, { className: "graphiql-chevron-icon", "aria-hidden": "true" })) : (react_1.default.createElement(react_2.ChevronDownIcon, { className: "graphiql-chevron-icon", "aria-hidden": "true" })))))),
                                react_1.default.createElement("div", { ref: editorToolsResize.secondRef },
                                    react_1.default.createElement("section", { className: "graphiql-editor-tool", "aria-label": activeSecondaryEditor === 'variable'
                                            ? 'Variables'
                                            : 'Headers' },
                                        react_1.default.createElement(react_2.VariableEditor, { editorTheme: props.editorTheme, isHidden: activeSecondaryEditor !== 'variable', keyMap: props.keyMap, onEdit: props.onEditVariables, onClickReference: onClickReference, readOnly: props.readOnly }),
                                        headerEditorEnabled && (react_1.default.createElement(react_2.HeaderEditor, { editorTheme: props.editorTheme, isHidden: activeSecondaryEditor !== 'header', keyMap: props.keyMap, onEdit: props.onEditHeaders, readOnly: props.readOnly })))))),
                        react_1.default.createElement("div", { ref: editorResize.dragBarRef },
                            react_1.default.createElement("div", { className: "graphiql-horizontal-drag-bar" })),
                        react_1.default.createElement("div", { ref: editorResize.secondRef },
                            react_1.default.createElement("div", { className: "graphiql-response" },
                                executionContext.isFetching ? react_1.default.createElement(react_2.Spinner, null) : null,
                                react_1.default.createElement(react_2.ResponseEditor, { editorTheme: props.editorTheme, ResponseTooltip: props.ResultsTooltip, keyMap: props.keyMap }),
                                footer)))))),
        react_1.default.createElement(react_2.Dialog, { isOpen: showDialog === 'short-keys', onDismiss: function () { return setShowDialog(null); } },
            react_1.default.createElement("div", { className: "graphiql-dialog-header" },
                react_1.default.createElement("div", { className: "graphiql-dialog-title" }, "Short Keys"),
                react_1.default.createElement(react_2.Dialog.Close, { onClick: function () { return setShowDialog(null); } })),
            react_1.default.createElement("div", { className: "graphiql-dialog-section" },
                react_1.default.createElement("div", null,
                    react_1.default.createElement("table", { className: "graphiql-table" },
                        react_1.default.createElement("thead", null,
                            react_1.default.createElement("tr", null,
                                react_1.default.createElement("th", null, "Short key"),
                                react_1.default.createElement("th", null, "Function"))),
                        react_1.default.createElement("tbody", null,
                            react_1.default.createElement("tr", null,
                                react_1.default.createElement("td", null,
                                    modifier,
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "F")),
                                react_1.default.createElement("td", null, "Search in editor")),
                            react_1.default.createElement("tr", null,
                                react_1.default.createElement("td", null,
                                    modifier,
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "K")),
                                react_1.default.createElement("td", null, "Search in documentation")),
                            react_1.default.createElement("tr", null,
                                react_1.default.createElement("td", null,
                                    modifier,
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Enter")),
                                react_1.default.createElement("td", null, "Execute query")),
                            react_1.default.createElement("tr", null,
                                react_1.default.createElement("td", null,
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Ctrl"),
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Shift"),
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "P")),
                                react_1.default.createElement("td", null, "Prettify editors")),
                            react_1.default.createElement("tr", null,
                                react_1.default.createElement("td", null,
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Ctrl"),
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Shift"),
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "M")),
                                react_1.default.createElement("td", null, "Merge fragments definitions into operation definition")),
                            react_1.default.createElement("tr", null,
                                react_1.default.createElement("td", null,
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Ctrl"),
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Shift"),
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "C")),
                                react_1.default.createElement("td", null, "Copy query")),
                            react_1.default.createElement("tr", null,
                                react_1.default.createElement("td", null,
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Ctrl"),
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "Shift"),
                                    ' + ',
                                    react_1.default.createElement("code", { className: "graphiql-key" }, "R")),
                                react_1.default.createElement("td", null, "Re-fetch schema using introspection")))),
                    react_1.default.createElement("p", null,
                        "The editors use",
                        ' ',
                        react_1.default.createElement("a", { href: "https://codemirror.net/5/doc/manual.html#keymaps", target: "_blank", rel: "noopener noreferrer" }, "CodeMirror Key Maps"),
                        ' ',
                        "that add more short keys. This instance of Graph",
                        react_1.default.createElement("em", null, "i"),
                        "QL uses",
                        ' ',
                        react_1.default.createElement("code", null, props.keyMap || 'sublime'),
                        ".")))),
        react_1.default.createElement(react_2.Dialog, { isOpen: showDialog === 'settings', onDismiss: function () {
                setShowDialog(null);
                setClearStorageStatus(null);
            } },
            react_1.default.createElement("div", { className: "graphiql-dialog-header" },
                react_1.default.createElement("div", { className: "graphiql-dialog-title" }, "Settings"),
                react_1.default.createElement(react_2.Dialog.Close, { onClick: function () {
                        setShowDialog(null);
                        setClearStorageStatus(null);
                    } })),
            react_1.default.createElement("div", { className: "graphiql-dialog-section" },
                react_1.default.createElement("div", null,
                    react_1.default.createElement("div", { className: "graphiql-dialog-section-title" }, "Theme"),
                    react_1.default.createElement("div", { className: "graphiql-dialog-section-caption" }, "Adjust how the interface looks like.")),
                react_1.default.createElement("div", null,
                    react_1.default.createElement(react_2.ButtonGroup, null,
                        react_1.default.createElement(react_2.Button, { className: theme === null ? 'active' : '', onClick: function () { return setTheme(null); } }, "System"),
                        react_1.default.createElement(react_2.Button, { className: theme === 'light' ? 'active' : '', onClick: function () { return setTheme('light'); } }, "Light"),
                        react_1.default.createElement(react_2.Button, { className: theme === 'dark' ? 'active' : '', onClick: function () { return setTheme('dark'); } }, "Dark")))),
            storageContext ? (react_1.default.createElement("div", { className: "graphiql-dialog-section" },
                react_1.default.createElement("div", null,
                    react_1.default.createElement("div", { className: "graphiql-dialog-section-title" }, "Clear storage"),
                    react_1.default.createElement("div", { className: "graphiql-dialog-section-caption" }, "Remove all locally stored data and start fresh.")),
                react_1.default.createElement("div", null,
                    react_1.default.createElement(react_2.Button, { state: clearStorageStatus || undefined, disabled: clearStorageStatus === 'success', onClick: function () {
                            try {
                                storageContext === null || storageContext === void 0 ? void 0 : storageContext.clear();
                                setClearStorageStatus('success');
                            }
                            catch (_a) {
                                setClearStorageStatus('error');
                            }
                        } }, clearStorageStatus === 'success'
                        ? 'Cleared data'
                        : clearStorageStatus === 'error'
                            ? 'Failed'
                            : 'Clear data')))) : null)));
}
exports.GraphiQLInterface = GraphiQLInterface;
function GraphiQLLogo(props) {
    return (react_1.default.createElement("div", { className: "title" }, props.children || (react_1.default.createElement("span", null,
        "Graph",
        react_1.default.createElement("em", null, "i"),
        "QL"))));
}
GraphiQLLogo.displayName = 'GraphiQLLogo';
function GraphiQLToolbar(props) {
    return react_1.default.createElement(react_1.default.Fragment, null, props.children);
}
GraphiQLToolbar.displayName = 'GraphiQLToolbar';
function GraphiQLFooter(props) {
    return react_1.default.createElement("div", { className: "graphiql-footer" }, props.children);
}
GraphiQLFooter.displayName = 'GraphiQLFooter';
function isChildComponentType(child, component) {
    var _a;
    if (((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.displayName) &&
        child.type.displayName === component.displayName) {
        return true;
    }
    return child.type === component;
}
//# sourceMappingURL=GraphiQL.js.map