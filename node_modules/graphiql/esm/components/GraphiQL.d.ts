import React, { PropsWithChildren, ReactNode } from 'react';
import { GraphQLSchema, ValidationRule, FragmentDefinitionNode, DocumentNode, IntrospectionQuery } from 'graphql';
import { KeyMap, ResponseTooltipType, TabsState } from '@graphiql/react';
import type { Fetcher, GetDefaultFieldNamesFn } from '@graphiql/toolkit';
export declare type GraphiQLToolbarConfig = {
    additionalContent?: React.ReactNode;
};
export declare type GraphiQLProps = {
    fetcher: Fetcher;
    schema?: GraphQLSchema | IntrospectionQuery | null;
    validationRules?: ValidationRule[];
    query?: string;
    variables?: string;
    headers?: string;
    operationName?: string;
    response?: string;
    storage?: Storage;
    defaultQuery?: string;
    defaultVariableEditorOpen?: boolean;
    defaultSecondaryEditorOpen?: boolean;
    headerEditorEnabled?: boolean;
    shouldPersistHeaders?: boolean;
    externalFragments?: string | FragmentDefinitionNode[];
    onCopyQuery?: (query?: string) => void;
    onEditQuery?: (query?: string, documentAST?: DocumentNode) => void;
    onEditVariables?: (value: string) => void;
    onEditHeaders?: (value: string) => void;
    onEditOperationName?: (operationName: string) => void;
    onToggleDocs?: (docExplorerOpen: boolean) => void;
    getDefaultFieldNames?: GetDefaultFieldNamesFn;
    editorTheme?: string;
    keyMap?: KeyMap;
    onToggleHistory?: (historyPaneOpen: boolean) => void;
    ResultsTooltip?: ResponseTooltipType;
    dangerouslyAssumeSchemaIsValid?: boolean;
    inputValueDeprecation?: boolean;
    schemaDescription?: boolean;
    introspectionQueryName?: string;
    readOnly?: boolean;
    docExplorerOpen?: boolean;
    toolbar?: GraphiQLToolbarConfig;
    maxHistoryLength?: number;
    onSchemaChange?: (schema: GraphQLSchema) => void;
    onTabChange?: (tab: TabsState) => void;
    children?: ReactNode;
};
export declare function GraphiQL({ dangerouslyAssumeSchemaIsValid, defaultQuery, docExplorerOpen, externalFragments, fetcher, headers, inputValueDeprecation, introspectionQueryName, maxHistoryLength, onEditOperationName, onSchemaChange, onTabChange, onToggleHistory, onToggleDocs, operationName, query, response, storage, schema, schemaDescription, shouldPersistHeaders, validationRules, variables, ...props }: GraphiQLProps): JSX.Element;
export declare namespace GraphiQL {
    var Logo: typeof GraphiQLLogo;
    var Toolbar: typeof GraphiQLToolbar;
    var Footer: typeof GraphiQLFooter;
}
export declare type GraphiQLInterfaceProps = Omit<GraphiQLProps, 'dangerouslyAssumeSchemaIsValid' | 'defaultQuery' | 'docExplorerOpen' | 'externalFragments' | 'fetcher' | 'headers' | 'inputValueDeprecation' | 'introspectionQueryName' | 'maxHistoryLength' | 'onEditOperationName' | 'onSchemaChange' | 'onTabChange' | 'onToggleDocs' | 'onToggleHistory' | 'operationName' | 'query' | 'response' | 'schema' | 'schemaDescription' | 'shouldPersistHeaders' | 'storage' | 'validationRules' | 'variables'>;
export declare function GraphiQLInterface(props: GraphiQLInterfaceProps): JSX.Element;
declare function GraphiQLLogo<TProps>(props: PropsWithChildren<TProps>): JSX.Element;
declare namespace GraphiQLLogo {
    var displayName: string;
}
declare function GraphiQLToolbar<TProps>(props: PropsWithChildren<TProps>): JSX.Element;
declare namespace GraphiQLToolbar {
    var displayName: string;
}
declare function GraphiQLFooter<TProps>(props: PropsWithChildren<TProps>): JSX.Element;
declare namespace GraphiQLFooter {
    var displayName: string;
}
export {};
//# sourceMappingURL=GraphiQL.d.ts.map